{"version":3,"sources":["modules/getPresence.js"],"names":["getPresence","init","channel","_data","presence","emit","_broadcast","callback","call","_listener","ps","subscription","isSubscribe"],"mappings":";;;;;QAkCgBA,W,GAAAA,W;;AA5BhB,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrB,MAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBF,OAApB,CAAJ,EAAkC;AAChC,WAAO,KAAP;AACD,GAFD,MAEO;AACL,SAAKC,KAAL,CAAWC,QAAX,CAAoBF,OAApB,IAA+B,EAA/B;AACA,WAAO,IAAP;AACD;AACF;;AAQD,SAASG,IAAT,CAAcH,OAAd,EAAuBE,QAAvB,EAAiC;AAC/B,OAAKD,KAAL,CAAWC,QAAX,CAAoBF,OAApB,IAA+BE,QAA/B;AACA,OAAKE,UAAL,CAAgBD,IAAhB,CAAqB,UAArB,EAAiCD,SAASF,OAA1C,EAAmDE,QAAnD;AACD;;AAUM,SAASJ,WAAT,CAAqBE,OAArB,EAA8BK,QAA9B,EAAwC;AAAA;;AAC7C,OAAKD,UAAL,CAAgBF,QAAhB,CAAyBF,OAAzB,EAAkCK,QAAlC;;AAEAN,OAAKO,IAAL,CAAU,IAAV,EAAgBN,OAAhB;;AAEA,MAAI,CAAC,KAAKO,SAAL,CAAeL,QAApB,EAA8B;AAC5B,SAAKK,SAAL,CAAeL,QAAf,GAA0B,UAACM,EAAD,EAAQ;AAChC,UAAIA,GAAGC,YAAH,IAAmB,MAAKL,UAAL,CAAgBM,WAAhB,CAA4B,UAA5B,EAAwCF,GAAGC,YAA3C,CAAvB,EAAiF;AAC/EN,aAAKG,IAAL,CAAU,KAAV,EAAgBE,GAAGC,YAAnB,EAAiCD,EAAjC;AACD;;AAED,UAAIA,GAAGR,OAAH,IAAc,MAAKI,UAAL,CAAgBM,WAAhB,CAA4B,UAA5B,EAAwCF,GAAGR,OAA3C,CAAlB,EAAuE;AACrEG,aAAKG,IAAL,CAAU,KAAV,EAAgBE,GAAGR,OAAnB,EAA4BQ,EAA5B;AACD;AACF,KARD;AASD;;AAED,SAAO,KAAKP,KAAL,CAAWC,QAAX,CAAoBF,OAApB,CAAP;AACD","file":"getPresence.js","sourcesContent":["/**\n * Add a channel to the state pn_presence\n *\n * @param {string} channel\n * @returns {boolean}\n */\nfunction init(channel) {\n  if (this._data.presence[channel]) {\n    return false;\n  } else {\n    this._data.presence[channel] = {};\n    return true;\n  }\n}\n\n/**\n * Emit a presence information through a callback and update the state\n *\n * @param {string} channel\n * @param {object} presence\n */\nfunction emit(channel, presence) {\n  this._data.presence[channel] = presence;\n  this._broadcast.emit('presence', presence.channel, presence);\n}\n\n\n/**\n * Get to receive presence information from a channel through a callback\n *\n * @param {string} channel\n * @param {function} callback\n * @returns {object}\n */\nexport function getPresence(channel, callback) {\n  this._broadcast.presence(channel, callback);\n\n  init.call(this, channel);\n\n  if (!this._listener.presence) {\n    this._listener.presence = (ps) => {\n      if (ps.subscription && this._broadcast.isSubscribe('presence', ps.subscription)) {\n        emit.call(this, ps.subscription, ps);\n      }\n\n      if (ps.channel && this._broadcast.isSubscribe('presence', ps.channel)) {\n        emit.call(this, ps.channel, ps);\n      }\n    };\n  }\n\n  return this._data.presence[channel];\n}\n"]}