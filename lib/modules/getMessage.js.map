{"version":3,"sources":["modules/getMessage.js"],"names":["getMessage","init","channel","_data","messages","emit","message","keepMessages","_keepMessages","push","length","splice","_broadcast","callback","arguments","call","_autoload","getHistory","_listener","subscription","isSubscribe"],"mappings":";;;;;QAyCgBA,U,GAAAA,U;;AAnChB,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrB,MAAIA,WAAW,KAAKC,KAAL,CAAWC,QAA1B,EAAoC;AAClC,WAAO,KAAP;AACD,GAFD,MAEO;AACL,SAAKD,KAAL,CAAWC,QAAX,CAAoBF,OAApB,IAA+B,EAA/B;AACA,WAAO,IAAP;AACD;AACF;;AAQD,SAASG,IAAT,CAAcH,OAAd,EAAuBI,OAAvB,EAAgC;AAC9B,MAAIF,WAAW,KAAKD,KAAL,CAAWC,QAAX,CAAoBF,OAApB,CAAf;AACA,MAAIK,eAAe,KAAKC,aAAL,CAAmBN,OAAnB,CAAnB;;AAEAE,WAASK,IAAT,CAAcH,OAAd;;AAEA,MAAIC,gBAAgBH,SAASM,MAAT,GAAkBH,YAAtC,EAAoD;AAClD,SAAKJ,KAAL,CAAWC,QAAX,CAAoBF,OAApB,EAA6BS,MAA7B,CAAoC,CAApC,EAAuCP,SAASM,MAAT,GAAkBH,YAAzD;AACD;;AAED,OAAKK,UAAL,CAAgBP,IAAhB,CAAqB,SAArB,EAAgCH,OAAhC,EAAyCI,OAAzC;AACD;;AASM,SAASN,UAAT,CAAoBE,OAApB,EAA6B;AAAA;;AAClC,MAAIW,iBAAJ;AACA,MAAIN,eAAe,GAAnB;;AAEA,MAAIO,UAAUJ,MAAV,KAAqB,CAAzB,EAA4B;AAC1BG,eAAWC,UAAU,CAAV,CAAX;AACD,GAFD,MAEO,IAAIA,UAAUJ,MAAV,KAAqB,CAAzB,EAA4B;AACjCG,eAAWC,UAAU,CAAV,CAAX;AACAP,mBAAeO,UAAU,CAAV,CAAf;AACD;;AAED,MAAIb,KAAKc,IAAL,CAAU,IAAV,EAAgBb,OAAhB,CAAJ,EAA8B;AAC5B,SAAKM,aAAL,CAAmBN,OAAnB,IAA8BK,YAA9B;AACA,SAAKS,SAAL,CAAeC,UAAf,CAA0Bf,OAA1B,EAAmCW,QAAnC;AACD;;AAED,OAAKD,UAAL,CAAgBN,OAAhB,CAAwBJ,OAAxB,EAAiCW,QAAjC;;AAEA,MAAI,CAAC,KAAKK,SAAL,CAAeZ,OAApB,EAA6B;AAC3B,SAAKY,SAAL,CAAeZ,OAAf,GAAyB,UAACA,OAAD,EAAa;AACpC,UAAIA,QAAQa,YAAR,IAAwB,MAAKP,UAAL,CAAgBQ,WAAhB,CAA4B,SAA5B,EAAuCd,QAAQa,YAA/C,CAA5B,EAA0F;AACxFd,aAAKU,IAAL,CAAU,KAAV,EAAgBT,QAAQa,YAAxB,EAAsCb,OAAtC;AACD;;AAED,UAAIA,QAAQJ,OAAR,IAAmB,MAAKU,UAAL,CAAgBQ,WAAhB,CAA4B,SAA5B,EAAuCd,QAAQJ,OAA/C,CAAvB,EAAgF;AAC9EG,aAAKU,IAAL,CAAU,KAAV,EAAgBT,QAAQJ,OAAxB,EAAiCI,OAAjC;AACD;AACF,KARD;AASD;;AAED,SAAO,KAAKH,KAAL,CAAWC,QAAX,CAAoBF,OAApB,CAAP;AACD","file":"getMessage.js","sourcesContent":["/**\n * Add a channel to the set of data\n *\n * @param {string} channel\n * @returns {boolean}\n */\nfunction init(channel) {\n  if (channel in this._data.messages) {\n    return false;\n  } else {\n    this._data.messages[channel] = [];\n    return true;\n  }\n}\n\n/**\n * Emit a message through a callback and update the set of data\n *\n * @param {string} channel\n * @param {object} message\n */\nfunction emit(channel, message) {\n  let messages = this._data.messages[channel];\n  let keepMessages = this._keepMessages[channel];\n\n  messages.push(message);\n\n  if (keepMessages && messages.length > keepMessages) {\n    this._data.messages[channel].splice(0, messages.length - keepMessages);\n  }\n\n  this._broadcast.emit('message', channel, message);\n}\n\n/**\n * Get to receive messages from a channel through a callback\n *\n * @param {string} channel\n * @param {function} callback\n * @returns {[]}\n */\nexport function getMessage(channel) {\n  let callback;\n  let keepMessages = 100;\n\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  } else if (arguments.length === 3) {\n    callback = arguments[1];\n    keepMessages = arguments[2];\n  }\n\n  if (init.call(this, channel)) {\n    this._keepMessages[channel] = keepMessages;\n    this._autoload.getHistory(channel, callback);\n  }\n\n  this._broadcast.message(channel, callback);\n\n  if (!this._listener.message) {\n    this._listener.message = (message) => {\n      if (message.subscription && this._broadcast.isSubscribe('message', message.subscription)) {\n        emit.call(this, message.subscription, message);\n      }\n\n      if (message.channel && this._broadcast.isSubscribe('message', message.channel)) {\n        emit.call(this, message.channel, message);\n      }\n    };\n  }\n\n  return this._data.messages[channel];\n}\n"]}